import{_ as a,c as t,a0 as e,o as i}from"./chunks/framework.Dz46SkuX.js";const E=JSON.parse('{"title":"应用类型","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"project-types.md","filePath":"project-types.md"}'),n={name:"project-types.md"};function p(l,s,h,r,d,o){return i(),t("div",null,s[0]||(s[0]=[e(`<h1 id="project-types" tabindex="-1">应用类型 <a class="header-anchor" href="#project-types" aria-label="Permalink to &quot;应用类型 {#project-types}&quot;">​</a></h1><h2 id="全部后端-远程httpd" tabindex="-1">全部后端，远程HTTPD <a class="header-anchor" href="#全部后端-远程httpd" aria-label="Permalink to &quot;全部后端，远程HTTPD&quot;">​</a></h2><p>此种模式下，和浏览器没什么区别，所有的代码都在后端。 同时也可以通过JSAPI提供扩展的功能，可以看成是一个扩展后的网页浏览器。 这是最传统的模式。</p><p>这里有一个简单的例子。</p><h2 id="前后端分离-本地httpd" tabindex="-1">前后端分离，本地HTTPD <a class="header-anchor" href="#前后端分离-本地httpd" aria-label="Permalink to &quot;前后端分离，本地HTTPD&quot;">​</a></h2><p>前后端分离，Chariot会启动一个本地httpd服务器（端口随机）供前端使用。前端通过API接口与后端通信。 这是目前主流的web应用模式。</p><p>这里有一个简单的例子。</p><h2 id="静态h5-无httpd" tabindex="-1">静态H5，无HTTPD <a class="header-anchor" href="#静态h5-无httpd" aria-label="Permalink to &quot;静态H5，无HTTPD&quot;">​</a></h2><p>静态H5，无需网络，所有的业务逻辑都由本地 H5 来实现</p><p>这里有一个简单的例子</p><h1 id="更多的例子" tabindex="-1">更多的例子 <a class="header-anchor" href="#更多的例子" aria-label="Permalink to &quot;更多的例子&quot;">​</a></h1><p>例子1 例子2 例子3 例子4 例子5 例子6</p><p>. ├─ docs │ ├─ .vitepress │ │ └─ config.js │ ├─ api-examples.md │ ├─ markdown-examples.md │ └─ index.md └─ package.json</p><table tabindex="0"><thead><tr><th style="text-align:left;">Syntax</th><th style="text-align:center;">Description</th><th style="text-align:right;">Test Text</th></tr></thead><tbody><tr><td style="text-align:left;">core</td><td style="text-align:center;">Title</td><td style="text-align:right;">Here&#39;s this</td></tr><tr><td style="text-align:left;">Paragraph</td><td style="text-align:center;">Text</td><td style="text-align:right;">And more</td></tr></tbody></table><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart LR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subgraph 用户设备</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Chariot[Chariot]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subgraph 远程服务器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nodeServer[HTTPd]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Chariot &lt;--&gt; nodeServer</span></span></code></pre></div><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TB</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subgraph 用户设备</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Chariot[Chariot]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nodeServer[本地 HTTPd]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Chariot &lt;--&gt; nodeServer</span></span></code></pre></div><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TB</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subgraph 用户设备</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Chariot[Chariot]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end</span></span></code></pre></div><p><em><strong>请注意：</strong></em></p><p>所有的JS调用皆为异步，其返回值皆为 Promise。</p><p>下列文档中提到的返回值皆为 Promise 回调接收到的值。</p><p>下列文档中的示例，皆以 await 作为例子，可以复制到浏览器devtool中的主控台运行。</p>`,21)]))}const k=a(n,[["render",p]]);export{E as __pageData,k as default};
