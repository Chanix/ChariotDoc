import{_ as a,c as i,a0 as e,o as s}from"./chunks/framework.Dz46SkuX.js";const k=JSON.parse('{"title":"JSAPI 概述","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"jsapi.md","filePath":"jsapi.md"}'),l={name:"jsapi.md"};function n(h,t,r,d,p,o){return s(),i("div",null,t[0]||(t[0]=[e(`<h1 id="jsapi-概述" tabindex="-1">JSAPI 概述 <a class="header-anchor" href="#jsapi-概述" aria-label="Permalink to &quot;JSAPI 概述&quot;">​</a></h1><p>Chariot 提供了JavaScript 可调用的功能，以此突破浏览器的限制，操控受限资源。 所有 API 皆考虑到跨平台，最大可能的保证在主流操作系统下行为一致。 但由于操作系统的差异，某些功能存在差异或仅被限定的操作系统支持。</p><p>注意：所有 JavaScript 调用皆为异步调用函数。请使用异步编程（例如：callback, then, await, async...）， 具体请参阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noreferrer">JavaScript 相关文档</a> 。</p><h2 id="调用方法" tabindex="-1">调用方法 <a class="header-anchor" href="#调用方法" aria-label="Permalink to &quot;调用方法&quot;">​</a></h2><p>Chariot 会在浏览器组件窗口装载完成之后新增一个变量： <code>window.Chariot</code> 并触发事件 <code>ChariotReady</code>。 为了方便使用，Chariot 将扩展按功能分成了多个模块，公开于 <code>window.Chariot.api</code> 下。</p><p>在 JavaScript 中，通过 <code>window.Chariot.api.&lt;模块名&gt;.&lt;函数名&gt;</code> 这样的方式来进行调用，可以简写为 <code>__C.&lt;模块名&gt;.&lt;函数名&gt;</code> 。</p><p>例如下面几个是等价的调用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.Chariot.api.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Chariot.api.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>如果 JavaScript 在准备工作还没有完成时进行调用，那么将会出现错误（例如：页面装载时立即执行的代码），可以通过侦听事件来解决这个问题。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ChariotReady&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Chariot 准备完毕，可以调用了。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="增加与完善" tabindex="-1">增加与完善 <a class="header-anchor" href="#增加与完善" aria-label="Permalink to &quot;增加与完善&quot;">​</a></h2><p>有需要的话，JSAPI 将会按照不断的进行增加和完善。如果没有您需要的模块，可以在 ISSUE 中提出。 我们将定期整理，判断是否增加，并整理出优先顺序逐步完善。</p><ul><li>现有 API 缺陷的修复，优先级提高</li><li>需求量大，多人提出的，优先级提高</li><li>对项目有帮助的人员提出的，优先级提高</li><li>赞助者提出的，优先级提高</li></ul><p>请原谅我们的时间和精力有限，所有的需求都会尽量排期实现，但无法保证一定会被实现或何时实现。</p><h2 id="功能模块" tabindex="-1">功能模块 <a class="header-anchor" href="#功能模块" aria-label="Permalink to &quot;功能模块&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">模块名称</th><th style="text-align:left;">功能描述</th><th style="text-align:center;">Test Text</th></tr></thead><tbody><tr><td style="text-align:left;">core</td><td style="text-align:left;">基础功能</td><td style="text-align:center;"><a href="./jsapi_core.html">点击查看</a></td></tr><tr><td style="text-align:left;">env</td><td style="text-align:left;">环境变量</td><td style="text-align:center;"><a href="./jsapi_env.html">点击查看</a></td></tr><tr><td style="text-align:left;">clipboard</td><td style="text-align:left;">剪贴板</td><td style="text-align:center;"><a href="./jsapi_clipboard.html">点击查看</a></td></tr><tr><td style="text-align:left;">mainwin</td><td style="text-align:left;">主窗口</td><td style="text-align:center;"><a href="./404.html">点击查看</a></td></tr><tr><td style="text-align:left;">memdb</td><td style="text-align:left;">内存数据库</td><td style="text-align:center;">点击查看</td></tr><tr><td style="text-align:left;">sqlite3</td><td style="text-align:left;">sqlite3 数据库</td><td style="text-align:center;">点击查看</td></tr></tbody></table>`,16)]))}const g=a(l,[["render",n]]);export{k as __pageData,g as default};
