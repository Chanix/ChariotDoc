import{_ as a,c as i,a0 as e,o as s}from"./chunks/framework.Dz46SkuX.js";const g=JSON.parse('{"title":"基础功能 Chariot.core","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"jsapi_core.md","filePath":"jsapi_core.md"}'),l={name:"jsapi_core.md"};function n(h,t,r,p,d,o){return s(),i("div",null,t[0]||(t[0]=[e(`<h1 id="基础功能-chariot-core" tabindex="-1">基础功能 Chariot.core <a class="header-anchor" href="#基础功能-chariot-core" aria-label="Permalink to &quot;基础功能 Chariot.core&quot;">​</a></h1><h2 id="exit" tabindex="-1">Chariot.core.exit() <a class="header-anchor" href="#exit" aria-label="Permalink to &quot;Chariot.core.exit() {#exit}&quot;">​</a></h2><p>关闭所有窗口，正常退出。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="terminate" tabindex="-1">Chariot.core.terminate(retcode) <a class="header-anchor" href="#terminate" aria-label="Permalink to &quot;Chariot.core.terminate(retcode) {#terminate}&quot;">​</a></h2><p>强制关闭，立即中止。</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">retcode</td><td style="text-align:left;">number</td><td style="text-align:left;">系统返回值，可忽略，默认为 0</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">terminate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">terminate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 1</span></span></code></pre></div><h2 id="get_argv" tabindex="-1">Chariot.core.get_argv(para) <a class="header-anchor" href="#get_argv" aria-label="Permalink to &quot;Chariot.core.get_argv(para) {#get_argv}&quot;">​</a></h2><p>获取执行 Chariot 时使用的命令行参数。</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">para</td><td style="text-align:left;">忽略</td><td style="text-align:left;">返回所有的命令行参数；</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">number</td><td style="text-align:left;">返回对应索引位置的命令行参数，若无则返回 null；</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">string</td><td style="text-align:left;">返回指定参数名对应的值，若无则返回 null；</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Array[string]</td><td style="text-align:left;">字符串数组，其中的元素是参数值</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;project&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,13)]))}const c=a(l,[["render",n]]);export{g as __pageData,c as default};
