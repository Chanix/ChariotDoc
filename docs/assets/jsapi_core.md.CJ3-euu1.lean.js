import{_ as i,c as a,a0 as s,o as e}from"./chunks/framework.Dz46SkuX.js";const o=JSON.parse('{"title":"Chariot.core","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"jsapi_core.md","filePath":"jsapi_core.md"}'),l={name:"jsapi_core.md"};function n(h,t,r,p,d,k){return e(),a("div",null,t[0]||(t[0]=[s(`<h1 id="chariot-core" tabindex="-1">Chariot.core <a class="header-anchor" href="#chariot-core" aria-label="Permalink to &quot;Chariot.core&quot;">​</a></h1><p>基础功能</p><h2 id="exit" tabindex="-1">Chariot.core.exit <a class="header-anchor" href="#exit" aria-label="Permalink to &quot;Chariot.core.exit {#exit}&quot;">​</a></h2><p>关闭所有窗口，正常退出。</p><p>Chariot.core.exit()</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="terminate" tabindex="-1">Chariot.core.terminate <a class="header-anchor" href="#terminate" aria-label="Permalink to &quot;Chariot.core.terminate {#terminate}&quot;">​</a></h2><p>强制关闭，立即中止。</p><p>Chariot.core.terminate(retcode);</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">retcode</td><td style="text-align:left;">number</td><td style="text-align:left;">系统返回值，可忽略，默认为 0</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">terminate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">terminate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 1</span></span></code></pre></div><h2 id="get_argv" tabindex="-1">Chariot.core.get_argv <a class="header-anchor" href="#get_argv" aria-label="Permalink to &quot;Chariot.core.get_argv {#get_argv}&quot;">​</a></h2><p>获取执行 Chariot 时使用的命令行参数。</p><p>Chariot.core.get_argv(para);</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">para</td><td style="text-align:left;">忽略</td><td style="text-align:left;">返回所有的命令行参数；</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">number</td><td style="text-align:left;">返回对应索引位置的命令行参数，若无则返回 null；</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">string</td><td style="text-align:left;">返回指定参数名对应的值，若无则返回 null；</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Array[string]</td><td style="text-align:left;">字符串数组，其中的元素是参数值</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;project&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="run" tabindex="-1">Chariot.core.run <a class="header-anchor" href="#run" aria-label="Permalink to &quot;Chariot.core.run {#run}&quot;">​</a></h2><p>创建一个自动执行指定项目的 Chariot 实例。</p><p>Chariot.core.run(project_id, parameters)</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">project_id</td><td style="text-align:left;">string</td><td style="text-align:left;">项目标识号</td></tr><tr><td style="text-align:left;">parameters</td><td style="text-align:left;">string</td><td style="text-align:left;">命令行参数，可忽略。</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">number</td><td style="text-align:left;">新实例的进程号</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prjA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prjA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-p1 p1 /p2 p2 --p3 p3 --p4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="runwait" tabindex="-1">Chariot.core.runwait <a class="header-anchor" href="#runwait" aria-label="Permalink to &quot;Chariot.core.runwait {#runwait}&quot;">​</a></h2><p>创建一个自动执行指定项目的 Chariot 实例，并等其运行完毕。<br>运行完毕后，返回运行结果信息。</p><p>Chariot.core.run(project_id, parameters)</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">project_id</td><td style="text-align:left;">string</td><td style="text-align:left;">项目标识号</td></tr><tr><td style="text-align:left;">parameters</td><td style="text-align:left;">string</td><td style="text-align:left;">命令行参数，可忽略。</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;">一个字典对象，其中：</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">retcode (number) 进程返回值</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">stdio (string) 标准输出</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">stderr (string) 标准错误</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runwait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prjA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runwait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prjA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-p1 p1 /p2 p2 --p3 p3 --p4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="exec" tabindex="-1">Chariot.core.exec <a class="header-anchor" href="#exec" aria-label="Permalink to &quot;Chariot.core.exec {#exec}&quot;">​</a></h2><p>运行一个可执行文件</p><p>Chariot.core.exec(bin_name, parameters)</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">bin_name</td><td style="text-align:left;">string</td><td style="text-align:left;">项目标识号</td></tr><tr><td style="text-align:left;">parameters</td><td style="text-align:left;">string</td><td style="text-align:left;">命令行参数，可忽略。</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">number</td><td style="text-align:left;">新实例的进程号</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prjA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prjA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-p1 p1 /p2 p2 --p3 p3 --p4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="execwait" tabindex="-1">Chariot.core.execwait <a class="header-anchor" href="#execwait" aria-label="Permalink to &quot;Chariot.core.execwait {#execwait}&quot;">​</a></h2><p>创建一个自动执行指定项目的 Chariot 实例，并等其运行完毕。<br>运行完毕后，返回运行结果信息。</p><p>Chariot.core.run(bin_name, parameters)</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">bin_name</td><td style="text-align:left;">string</td><td style="text-align:left;">项目标识号</td></tr><tr><td style="text-align:left;">parameters</td><td style="text-align:left;">string</td><td style="text-align:left;">命令行参数，可忽略。</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;">一个字典对象，其中：</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">retcode (number) 进程返回值</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">stdio (string) 标准输出</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">stderr (string) 标准错误</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runwait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prjA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runwait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prjA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-p1 p1 /p2 p2 --p3 p3 --p4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,41)]))}const y=i(l,[["render",n]]);export{o as __pageData,y as default};
