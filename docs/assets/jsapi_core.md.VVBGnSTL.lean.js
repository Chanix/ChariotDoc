import{_ as a,c as e,a0 as i,o as s}from"./chunks/framework.Dz46SkuX.js";const k=JSON.parse('{"title":"Chariot.core","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"jsapi_core.md","filePath":"jsapi_core.md"}'),r={name:"jsapi_core.md"};function h(n,t,l,o,p,c){return s(),e("div",null,t[0]||(t[0]=[i(`<h1 id="chariot-core" tabindex="-1">Chariot.core <a class="header-anchor" href="#chariot-core" aria-label="Permalink to &quot;Chariot.core&quot;">​</a></h1><p>基础功能</p><h2 id="exit" tabindex="-1">Chariot.core.exit <a class="header-anchor" href="#exit" aria-label="Permalink to &quot;Chariot.core.exit {#exit}&quot;">​</a></h2><p>Chariot.core.exit()</p><p>关闭退出程序。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="terminate" tabindex="-1">Chariot.core.terminate <a class="header-anchor" href="#terminate" aria-label="Permalink to &quot;Chariot.core.terminate {#terminate}&quot;">​</a></h2><p>Chariot.core.terminate(retcode);</p><p>强制关闭退出程序。</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">retcode</td><td style="text-align:left;">数值类型，指定返回值，可忽略，默认为 0。</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">terminate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">terminate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="get_argv" tabindex="-1">Chariot.core.get_argv <a class="header-anchor" href="#get_argv" aria-label="Permalink to &quot;Chariot.core.get_argv {#get_argv}&quot;">​</a></h2><p>Chariot.core.get_argv();</p><p>获取执行 Chariot 时，使用的命令行参数。</p><table tabindex="0"><thead><tr><th style="text-align:center;">返回值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">Array[string]</td><td style="text-align:left;">字符串数组，其中的元素依序为命令行的各个参数</td></tr></tbody></table><p>由于特殊字符和命令行环境的存在，指定命令行参数时，请按实际情况进行转义。建议用双引号 &quot; 将参数值包含起来。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,17)]))}const g=a(r,[["render",h]]);export{k as __pageData,g as default};
