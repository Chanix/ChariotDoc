import{_ as a,c as e,a0 as i,o as s}from"./chunks/framework.Dz46SkuX.js";const g=JSON.parse('{"title":"应用项目 Chariot.project","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"jsapi_project.md","filePath":"jsapi_project.md"}'),l={name:"jsapi_project.md"};function h(n,t,r,p,d,o){return s(),e("div",null,t[0]||(t[0]=[i(`<h1 id="应用项目-chariot-project" tabindex="-1">应用项目 Chariot.project <a class="header-anchor" href="#应用项目-chariot-project" aria-label="Permalink to &quot;应用项目 Chariot.project&quot;">​</a></h1><p>运行于 Chariot 上的应用，称之为应用项目，简称“项目”。本模块提供了一系列对项目操作的功能。</p><h2 id="get" tabindex="-1">Chariot.project.get(project_id) <a class="header-anchor" href="#get" aria-label="Permalink to &quot;Chariot.project.get(project_id) {#get}&quot;">​</a></h2><p>获取项目信息</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名</th><th style="text-align:left;">说明</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:center;">project_id</td><td style="text-align:left;">string</td><td style="text-align:left;">项目标识号</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;">字典，包含项目信息的键值对</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="gethome" tabindex="-1">Chariot.project.gethome() <a class="header-anchor" href="#gethome" aria-label="Permalink to &quot;Chariot.project.gethome() {#gethome}&quot;">​</a></h2><p>获取项目主目录</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">string</td><td style="text-align:left;">应用项目主目录</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gethome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="list" tabindex="-1">Chariot.project.list() <a class="header-anchor" href="#list" aria-label="Permalink to &quot;Chariot.project.list() {#list}&quot;">​</a></h2><p>获取已存在的项目列表</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Array[string]</td><td style="text-align:left;">一个列表，其中的每个元素是项目的名称</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="run" tabindex="-1">Chariot.project.run(project_id, parameters) <a class="header-anchor" href="#run" aria-label="Permalink to &quot;Chariot.project.run(project_id, parameters) {#run}&quot;">​</a></h2><p>创建一个自动执行指定项目的 Chariot 实例。</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">project_id</td><td style="text-align:left;">string</td><td style="text-align:left;">项目标识号</td></tr><tr><td style="text-align:left;">parameters</td><td style="text-align:left;">string</td><td style="text-align:left;">命令行参数，可忽略。</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">number</td><td style="text-align:left;">新实例的进程号</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prjA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prjA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-p1 p1 /p2 p2 --p3 p3 --p4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="runwait" tabindex="-1">Chariot.project.runwait(project_id, parameters) <a class="header-anchor" href="#runwait" aria-label="Permalink to &quot;Chariot.project.runwait(project_id, parameters) {#runwait}&quot;">​</a></h2><p>创建一个自动执行指定项目的 Chariot 实例，并等其运行完毕。<br>运行完毕后，返回运行结果信息。</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">project_id</td><td style="text-align:left;">string</td><td style="text-align:left;">项目标识号</td></tr><tr><td style="text-align:left;">parameters</td><td style="text-align:left;">string</td><td style="text-align:left;">命令行参数，可忽略。</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;">一个字典对象，其中：</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">retcode (number) 进程返回值</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">stdio (string) 标准输出</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">stderr (string) 标准错误</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runwait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prjA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __C.project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runwait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prjA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-p1 p1 /p2 p2 --p3 p3 --p4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,25)]))}const c=a(l,[["render",h]]);export{g as __pageData,c as default};
